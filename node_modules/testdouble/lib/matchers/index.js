// Generated by CoffeeScript 1.11.1
(function() {
  var _, create, log, stringifyArguments;

  _ = require('../util/lodash-wrap');

  log = require('../log');

  create = require('./create');

  stringifyArguments = require('../stringify/arguments');

  module.exports = {
    create: create,
    captor: require('./captor'),
    isA: create({
      name: function(matcherArgs) {
        var ref, s;
        s = ((ref = matcherArgs[0]) != null ? ref.name : void 0) != null ? matcherArgs[0].name : stringifyArguments(matcherArgs);
        return "isA(" + s + ")";
      },
      matches: function(matcherArgs, actual) {
        var type;
        type = matcherArgs[0];
        if (type === Number) {
          return _.isNumber(actual);
        } else if (type === String) {
          return _.isString(actual);
        } else if (type === Boolean) {
          return _.isBoolean(actual);
        } else {
          return actual instanceof type;
        }
      }
    }),
    anything: create({
      name: 'anything',
      matches: function() {
        return true;
      }
    }),
    contains: create({
      name: 'contains',
      matches: function(containings, actualArg) {
        var containsAllSpecified;
        if (containings.length === 0) {
          return false;
        }
        containsAllSpecified = function(containing, actual) {
          return _.every(containing, function(val, key) {
            if (actual == null) {
              return false;
            }
            if (_.isPlainObject(val)) {
              return containsAllSpecified(val, actual[key]);
            } else {
              return _.isEqual(val, actual[key]);
            }
          });
        };
        return _.every(containings, function(containing) {
          if (_.isArray(containing)) {
            return _.some(actualArg, function(actualElement) {
              return _.isEqual(actualElement, containing);
            });
          } else if (_.isPlainObject(containing) && _.isPlainObject(actualArg)) {
            return containsAllSpecified(containing, actualArg);
          } else if (_.isRegExp(containing)) {
            return containing.test(actualArg);
          } else {
            return _.includes(actualArg, containing);
          }
        });
      }
    }),
    argThat: create({
      name: 'argThat',
      matches: function(matcherArgs, actual) {
        var predicate;
        predicate = matcherArgs[0];
        return predicate(actual);
      }
    }),
    not: create({
      name: 'not',
      matches: function(matcherArgs, actual) {
        var expected;
        expected = matcherArgs[0];
        return !_.isEqual(expected, actual);
      }
    })
  };

}).call(this);
