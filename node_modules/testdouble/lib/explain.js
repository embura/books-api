// Generated by CoffeeScript 1.11.1
(function() {
  var _, callDescription, callsStore, nullDescription, store, stringifyArgs, stringifyName, stubbingDescription, stubbingsStore, testdoubleDescription;

  _ = require('./util/lodash-wrap');

  store = require('./store');

  callsStore = require('./store/calls');

  stubbingsStore = require('./store/stubbings');

  stringifyArgs = require('./stringify/arguments');

  module.exports = function(testDouble) {
    var calls, stubs;
    if (store["for"](testDouble, false) == null) {
      return nullDescription();
    }
    calls = callsStore["for"](testDouble);
    stubs = stubbingsStore["for"](testDouble);
    return {
      callCount: calls.length,
      calls: calls,
      description: testdoubleDescription(testDouble, stubs, calls) + stubbingDescription(stubs) + callDescription(calls),
      isTestDouble: true
    };
  };

  nullDescription = function() {
    return {
      callCount: 0,
      calls: [],
      description: "This is not a test double.",
      isTestDouble: false
    };
  };

  testdoubleDescription = function(testDouble, stubs, calls) {
    return "This test double " + (stringifyName(testDouble)) + "has " + stubs.length + " stubbings and " + calls.length + " invocations.";
  };

  stubbingDescription = function(stubs) {
    if (stubs.length === 0) {
      return "";
    }
    return _.reduce(stubs, function(desc, stub) {
      var args, plan;
      plan = (function() {
        switch (stub.config.plan) {
          case 'thenCallback':
            return 'callback';
          case 'thenResolve':
            return 'resolve';
          case 'thenReject':
            return 'reject';
          default:
            return 'return';
        }
      })();
      args = (function() {
        switch (stub.config.plan) {
          case 'thenCallback':
            return "`(" + (stringifyArgs(stub.stubbedValues, ", ")) + ")`";
          default:
            return stringifyArgs(stub.stubbedValues, ", then ", "`");
        }
      })();
      return desc + ("\n  - when called with `(" + (stringifyArgs(stub.args)) + ")`, then " + plan + " " + args + ".");
    }, "\n\nStubbings:");
  };

  callDescription = function(calls) {
    if (calls.length === 0) {
      return "";
    }
    return _.reduce(calls, function(desc, call) {
      return desc + ("\n  - called with `(" + (stringifyArgs(call.args)) + ")`.");
    }, "\n\nInvocations:");
  };

  stringifyName = function(testDouble) {
    var name;
    if (name = store["for"](testDouble).name) {
      return "`" + name + "` ";
    } else {
      return "";
    }
  };

}).call(this);
