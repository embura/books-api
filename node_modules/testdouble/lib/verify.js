// Generated by CoffeeScript 1.11.1
(function() {
  var _, argsMatch, callsStore, ignoreMessage, invocationSummary, log, store, stringifyArgs, stringifyName, stubbingsStore, timesMessage, unsatisfiedErrorMessage, warnIfStubbed;

  _ = require('./util/lodash-wrap');

  store = require('./store');

  callsStore = require('./store/calls');

  stubbingsStore = require('./store/stubbings');

  stringifyArgs = require('./stringify/arguments');

  log = require('./log');

  argsMatch = require('./args-match');

  module.exports = function(__userDoesPretendInvocationHere__, config) {
    var last;
    if (config == null) {
      config = {};
    }
    if (last = callsStore.pop()) {
      if (callsStore.wasInvoked(last.testDouble, last.args, config)) {
        return warnIfStubbed(last.testDouble, last.args);
      } else {
        return log.fail(unsatisfiedErrorMessage(last.testDouble, last.args, config));
      }
    } else {
      return log.error("td.verify", "No test double invocation detected for `verify()`.\n\n  Usage:\n    verify(myTestDouble('foo'))");
    }
  };

  warnIfStubbed = function(testDouble, actualArgs) {
    return _.find(stubbingsStore["for"](testDouble), function(stubbing) {
      if (argsMatch(stubbing.args, actualArgs, {
        allowMatchers: false
      })) {
        log.warn('td.verify', "test double" + (stringifyName(testDouble)) + " was both stubbed and verified with arguments (" + (stringifyArgs(actualArgs)) + "), which is redundant and probably unnecessary.", "https://github.com/testdouble/testdouble.js/blob/master/docs/B-frequently-asked-questions.md#why-shouldnt-i-call-both-tdwhen-and-tdverify-for-a-single-interaction-with-a-test-double");
        return true;
      }
    });
  };

  unsatisfiedErrorMessage = function(testDouble, args, config) {
    return ("Unsatisfied verification on test double" + (stringifyName(testDouble)) + ".\n\n  Wanted:\n    - called with `(" + (stringifyArgs(args)) + ")`" + (timesMessage(config)) + (ignoreMessage(config)) + ".") + invocationSummary(testDouble);
  };

  stringifyName = function(testDouble) {
    var name;
    if (name = store["for"](testDouble).name) {
      return " `" + name + "`";
    } else {
      return "";
    }
  };

  invocationSummary = function(testDouble) {
    var calls;
    calls = callsStore["for"](testDouble);
    if (calls.length === 0) {
      return "\n\n  But there were no invocations of the test double.";
    } else {
      return _.reduce(calls, function(desc, call) {
        return desc + ("\n    - called with `(" + (stringifyArgs(call.args)) + ")`.");
      }, "\n\n  But was actually called:");
    }
  };

  timesMessage = function(config) {
    if (config.times == null) {
      return "";
    }
    return " " + config.times + " time" + (config.times === 1 ? '' : 's');
  };

  ignoreMessage = function(config) {
    if (config.ignoreExtraArgs == null) {
      return "";
    }
    return ", ignoring any additional arguments";
  };

}).call(this);
