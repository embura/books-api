// Generated by CoffeeScript 1.11.1
(function() {
  describe('td.replace', function() {
    describe('Replacing properties on objects and restoring them with reset', function() {
      Given(function() {
        var Thing;
        return this.dependency = {
          honk: function() {
            return 'og honk';
          },
          thingConstructor: Thing = (function() {
            function Thing() {}

            Thing.prototype.foo = function() {
              return 'og foo';
            };

            Thing.prototype.bar = function() {
              return 'og bar';
            };

            return Thing;

          })()
        };
      });
      describe('Replacing a function', function() {
        When(function() {
          return this.double = td.replace(this.dependency, 'honk');
        });
        Then(function() {
          return td.explain(this.double).isTestDouble === true;
        });
        And(function() {
          return this.double === this.dependency.honk;
        });
        return describe('reset restores it', function() {
          When(function() {
            return td.reset();
          });
          Then(function() {
            return td.explain(this.double).isTestDouble === false;
          });
          return And(function() {
            return this.dependency.honk() === 'og honk';
          });
        });
      });
      describe('Replacing a constructor function', function() {
        When(function() {
          return this.doubleBag = td.replace(this.dependency, 'thingConstructor');
        });
        Then(function() {
          return td.explain(this.doubleBag.foo).isTestDouble === true;
        });
        Then(function() {
          return td.explain(this.doubleBag.bar).isTestDouble === true;
        });
        And(function() {
          return this.doubleBag.foo === new this.dependency.thingConstructor().foo;
        });
        And(function() {
          return this.doubleBag.bar === new this.dependency.thingConstructor().bar;
        });
        return describe('reset restores it', function() {
          When(function() {
            return td.reset();
          });
          Then(function() {
            return td.explain(new this.dependency.thingConstructor().foo).isTestDouble === false;
          });
          return And(function() {
            return new this.dependency.thingConstructor().foo() === 'og foo';
          });
        });
      });
      describe('Replacing an ES6 constructor function', function() {
        if (!(typeof NODE_JS !== "undefined" && NODE_JS !== null ? NODE_JS.AT_LEAST_6 : void 0)) {
          return;
        }
        Given(function() {
          return this.dependency.es6constructor = require('../../fixtures/es6class');
        });
        Given(function() {
          return this.doubleBag = td.replace(this.dependency, 'es6constructor');
        });
        Given(function() {
          return this.es6Thing = new this.dependency.es6constructor();
        });
        Then(function() {
          return td.explain(this.doubleBag.foo).isTestDouble === true;
        });
        Then(function() {
          return td.explain(this.doubleBag.bar).isTestDouble === true;
        });
        And(function() {
          return this.doubleBag.foo === this.es6Thing.foo;
        });
        And(function() {
          return this.doubleBag.bar === this.es6Thing.bar;
        });
        describe('the member td functions actually work', function() {
          Given(function() {
            return td.when(this.doubleBag.foo('cat')).thenReturn('dog');
          });
          return Then(function() {
            return this.es6Thing.foo('cat') === 'dog';
          });
        });
        return describe('reset restores it', function() {
          When(function() {
            return td.reset();
          });
          Then(function() {
            return td.explain(new this.dependency.es6constructor().foo).isTestDouble === false;
          });
          return And(function() {
            return new this.dependency.es6constructor().foo() === 'og foo';
          });
        });
      });
      describe('Replacing a method on an object instantiated with `new`', function() {
        Given(function() {
          return this.thing = new this.dependency.thingConstructor();
        });
        When(function() {
          return this.doubleFoo = td.replace(this.thing, 'foo');
        });
        Then(function() {
          return td.explain(this.thing.foo).isTestDouble === true;
        });
        And(function() {
          return this.thing.foo() === void 0;
        });
        return describe('reset restores it', function() {
          When(function() {
            return td.reset();
          });
          Then(function() {
            return td.explain(this.thing.foo).isTestDouble === false;
          });
          return And(function() {
            return this.thing.foo() === 'og foo';
          });
        });
      });
      describe('Replacing an object / function bag', function() {
        Given(function() {
          return this.horseClass = function() {};
        });
        Given(function() {
          return this.horseClass.prototype.nay = function() {
            return 'nay';
          };
        });
        Given(function() {
          return this.dependency.animals = {
            bark: function() {
              return 'og bark';
            },
            woof: function() {
              return 'og woof';
            },
            age: 18,
            horse: this.horseClass
          };
        });
        When(function() {
          return this.doubleBag = td.replace(this.dependency, 'animals');
        });
        Then(function() {
          return td.explain(this.doubleBag.bark).isTestDouble === true;
        });
        Then(function() {
          return td.explain(this.doubleBag.woof).isTestDouble === true;
        });
        And(function() {
          return this.doubleBag.bark === this.dependency.animals.bark;
        });
        And(function() {
          return this.doubleBag.woof === this.dependency.animals.woof;
        });
        And(function() {
          return this.doubleBag.age === 18;
        });
        return describe('instantiable types work too', function() {
          When(function() {
            return td.when(this.doubleBag.horse.nay('hay')).thenReturn('no way');
          });
          return Then(function() {
            return (new this.dependency.animals.horse()).nay('hay') === 'no way';
          });
        });
      });
      describe('Replacing a property that is not an object/function', function() {
        Given(function() {
          return this.message = 'Error: testdouble.js - td.replace - "badType" property was found, but test double only knows how to replace functions, constructors, & objects containing functions (its value was ';
        });
        When(function() {
          var e;
          try {
            return td.replace(this.dependency, 'badType');
          } catch (error) {
            e = error;
            return this.error = e;
          }
        });
        context('a number', function() {
          Given(function() {
            return this.dependency.badType = 5;
          });
          return Then(function() {
            return this.error.message === this.message + '5).';
          });
        });
        context('a string', function() {
          Given(function() {
            return this.dependency.badType = "hello";
          });
          return Then(function() {
            return this.error.message === this.message + '"hello").';
          });
        });
        context('null', function() {
          Given(function() {
            return this.dependency.badType = null;
          });
          return Then(function() {
            return this.error.message === this.message + 'null).';
          });
        });
        return context('undefined', function() {
          Given(function() {
            return this.dependency.badType = void 0;
          });
          return Then(function() {
            return this.error.message === this.message + 'undefined).';
          });
        });
      });
      describe('Replacing a non-existent property', function() {
        context('using automatic replacement', function() {
          When(function() {
            var e;
            try {
              return td.replace(this.dependency, 'notAThing');
            } catch (error) {
              e = error;
              return this.error = e;
            }
          });
          return Then(function() {
            return this.error.message === 'Error: testdouble.js - td.replace - No "notAThing" property was found.';
          });
        });
        return context('with manual replacement', function() {
          Given(function() {
            return this.myFake = td.replace(this.dependency, 'notAThing', 'MY FAKE');
          });
          Then(function() {
            return this.myFake === 'MY FAKE';
          });
          And(function() {
            return this.myFake === this.dependency.notAThing;
          });
          return context('is deleted following a reset', function() {
            Given(function() {
              return td.reset();
            });
            return Then(function() {
              return this.dependency.hasOwnProperty('notAThing') === false;
            });
          });
        });
      });
      return describe('Manually specifying the override', function() {
        Given(function() {
          return this.ogWarn = console.warn;
        });
        Given(function() {
          return this.warnings = [];
        });
        Given(function() {
          return console.warn = (function(_this) {
            return function(msg) {
              return _this.warnings.push(msg);
            };
          })(this);
        });
        afterEach(function() {
          return console.warn = this.ogWarn;
        });
        context('with a matching type', function() {
          Given(function() {
            return this.originalHonk = this.dependency.honk;
          });
          When(function() {
            return this.myDouble = td.replace(this.dependency, 'honk', function() {
              return 'FAKE THING';
            });
          });
          Then(function() {
            return this.myDouble() === 'FAKE THING';
          });
          And(function() {
            return this.myDouble === this.dependency.honk;
          });
          And(function() {
            return this.warnings.length === 0;
          });
          return context('is restored following a reset', function() {
            When(function() {
              return td.reset();
            });
            return Then(function() {
              return this.dependency.honk === this.originalHonk;
            });
          });
        });
        context('with mismatched types', function() {
          Given(function() {
            return this.dependency.lol = 5;
          });
          When(function() {
            return td.replace(this.dependency, 'lol', 'foo');
          });
          return Then(function() {
            return this.warnings[0] === "Warning: testdouble.js - td.replace - property \"lol\" 5 (Number) was replaced with \"foo\", which has a different type (String).";
          });
        });
        return context('where the actual is not defined', function() {
          When(function() {
            return td.replace(this.dependency, 'naw', 'lol');
          });
          return Then(function() {
            return this.warnings.length === 0;
          });
        });
      });
    });
    return describe('Node.js-specific module replacement', function() {
      if (!NODE_JS) {
        return;
      }
      Given(function() {
        return this.passenger = td.replace('../../fixtures/passenger');
      });
      Given(function() {
        return this.honk = td.replace('../../fixtures/honk');
      });
      Given(function() {
        return this.turn = td.replace('../../fixtures/turn');
      });
      Given(function() {
        return this.brake = td.replace('../../fixtures/brake', 'ANYTHING I WANT');
      });
      Given(function() {
        return this.lights = td.replace('../../fixtures/lights');
      });
      Given(function() {
        return this.car = require('../../fixtures/car');
      });
      describe('quibbling prototypal constructors get created with td.object(Type)', function() {
        Given(function() {
          return td.when(this.passenger.sit()).thenReturn('ow');
        });
        When(function() {
          return this.result = this.car.seatPassenger();
        });
        return Then(function() {
          return this.result === 'ow';
        });
      });
      describe('quibbling plain old functions with td.function()', function() {
        return Then(function() {
          return this.car.honk.toString() === "[test double for \"../../fixtures/honk\"]";
        });
      });
      describe('naming the doubles of functions with names', function() {
        Given(function() {
          return td.when(this.car.turn()).thenReturn('wee');
        });
        Then(function() {
          return this.car.turn() === 'wee';
        });
        return And(function() {
          return this.car.turn.toString() === "[test double for \"turn\"]";
        });
      });
      describe('manually stubbing an entry', function() {
        return Then(function() {
          return this.car.brake === 'ANYTHING I WANT';
        });
      });
      return describe('an object of funcs', function() {
        Then(function() {
          return this.car.lights.headlight.toString() === '[test double for ".headlight"]';
        });
        And(function() {
          return this.car.lights.turnSignal.toString() === '[test double for ".turnSignal"]';
        });
        And(function() {
          return this.car.lights.count === 4;
        });
        return describe('and classes on objects on funcs', function() {
          if (!NODE_JS.AT_LEAST_0_11) {
            return;
          }
          When(function() {
            return td.when(this.lights.brights.beBright(1)).thenReturn('yow');
          });
          return Then(function() {
            return (new this.car.lights.brights).beBright(1) === 'yow';
          });
        });
      });
    });
  });

}).call(this);
