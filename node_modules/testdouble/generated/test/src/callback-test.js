// Generated by CoffeeScript 1.11.1
(function() {
  describe('td.callback', function() {
    Given(function() {
      return this.testDouble = td["function"]();
    });
    describe('when', function() {
      When(function() {
        return this.returnValue = this.testDouble('/foo', (function(_this) {
          return function(er, results) {
            _this.callbackInvoked = true;
            _this.er = er;
            return _this.results = results;
          };
        })(this));
      });
      context('VERBOSE: using td.callback() as a matcher with a thenReturn chain', function() {
        Given(function() {
          return td.when(this.testDouble('/foo', td.callback(null, 'some results'))).thenReturn('pandas');
        });
        Then(function() {
          return this.er === null;
        });
        And(function() {
          return this.results === 'some results';
        });
        return And(function() {
          return this.returnValue === 'pandas';
        });
      });
      context('TERSE: use thenCallback chain with td.callback implied as last arg', function() {
        Given(function() {
          return td.when(this.testDouble('/foo')).thenCallback(null, 'some results');
        });
        Then(function() {
          return this.callbackInvoked = true;
        });
        And(function() {
          return this.er === null;
        });
        And(function() {
          return this.results === 'some results';
        });
        return And(function() {
          return this.returnValue === void 0;
        });
      });
      context('ORDER-EXPLICIT: use td.callback as a marker with a thenCallback chain', function() {
        Given(function() {
          return td.when(this.testDouble('/foo', td.callback)).thenCallback(null, 'some results');
        });
        Then(function() {
          return this.er === null;
        });
        And(function() {
          return this.results === 'some results';
        });
        return And(function() {
          return this.returnValue === void 0;
        });
      });
      context('EDGE CASE: use td.callback() as a matcher with a thenCallback chain (callback() wins)', function() {
        Given(function() {
          return td.when(this.testDouble('/foo', td.callback('lolz'))).thenCallback(null, 'some results');
        });
        Then(function() {
          return this.er === 'lolz';
        });
        return And(function() {
          return this.results === void 0;
        });
      });
      context('EDGE CASE: Multiple td.callbacks, some markers and some matchers', function() {
        Given(function() {
          return td.when(this.testDouble('/bar', td.callback('neat'), td.callback, 'hi')).thenCallback('perfect');
        });
        When(function() {
          return this.testDouble('/bar', ((function(_this) {
            return function(cb1arg1) {
              _this.cb1arg1 = cb1arg1;
            };
          })(this)), ((function(_this) {
            return function(cb2arg1) {
              _this.cb2arg1 = cb2arg1;
            };
          })(this)), 'hi');
        });
        Then(function() {
          return this.cb1arg1 === 'neat';
        });
        return And(function() {
          return this.cb2arg1 === 'perfect';
        });
      });
      context('EDGE CASE: use td.callback as a marker with thenReturn (no-arg invocation is made)', function() {
        Given(function() {
          return td.when(this.testDouble('/foo', td.callback)).thenReturn(null);
        });
        Then(function() {
          return this.er === void 0;
        });
        And(function() {
          return this.results === void 0;
        });
        return And(function() {
          return this.callbackInvoked === true;
        });
      });
      return context('EDGE CASE: thenCallback used but not satisfied', function() {
        Given(function() {
          return td.when(this.testDouble('/bar')).thenCallback('a-ha');
        });
        Given(function() {
          return td.when(this.testDouble('/bar')).thenReturn('o_O');
        });
        When(function() {
          return this.result = this.testDouble('/bar');
        });
        return Then(function() {
          return this.result === 'o_O';
        });
      });
    });
    return describe('verify???? what would that mean', function() {});
  });

}).call(this);
