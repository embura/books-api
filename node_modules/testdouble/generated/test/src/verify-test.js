// Generated by CoffeeScript 1.11.1
(function() {
  describe('.verify', function() {
    Given(function() {
      return this.testDouble = td["function"]();
    });
    context('a satisfied verification', function() {
      When(function() {
        return this.testDouble("dogs", "cats");
      });
      return Then(function() {
        return td.verify(this.testDouble("dogs", "cats"));
      });
    });
    context('an unsatisfied verification - no interactions', function() {
      Given(function() {
        return this.arg = {
          joe: 5,
          jill: [1, '2', 3]
        };
      });
      Given(function() {
        return this.arg.circ = this.arg;
      });
      return Then(function() {
        return shouldThrow(((function(_this) {
          return function() {
            return td.verify(_this.testDouble("WOAH", _this.arg));
          };
        })(this)), "Unsatisfied verification on test double.\n\n  Wanted:\n    - called with `(\"WOAH\", {joe: 5, jill: [1, \"2\", 3], circ: \"[Circular]\"})`.\n\n  But there were no invocations of the test double.");
      });
    });
    context('unsatisfied verify - other interactions', function() {
      When(function() {
        return this.testDouble("the wrong WOAH");
      });
      return Then(function() {
        return shouldThrow(((function(_this) {
          return function() {
            return td.verify(_this.testDouble("WOAH"));
          };
        })(this)), "Unsatisfied verification on test double.\n\n  Wanted:\n    - called with `(\"WOAH\")`.\n\n  But was actually called:\n    - called with `(\"the wrong WOAH\")`.");
      });
    });
    context('unsatisfied verify - wrong arg count', function() {
      When(function() {
        return this.testDouble("good", "bad");
      });
      return Then(function() {
        return shouldThrow(((function(_this) {
          return function() {
            return td.verify(_this.testDouble("good"));
          };
        })(this)), "Unsatisfied verification on test double.\n\n  Wanted:\n    - called with `(\"good\")`.\n\n  But was actually called:\n    - called with `(\"good\", \"bad\")`.");
      });
    });
    context('unsatisfied verify - wrong arg count with ignored args', function() {
      When(function() {
        return this.testDouble("good", "bad", "more", "args");
      });
      return Then(function() {
        return shouldThrow(((function(_this) {
          return function() {
            return td.verify(_this.testDouble("good", "gooder"), {
              ignoreExtraArgs: true
            });
          };
        })(this)), "Unsatisfied verification on test double.\n\n  Wanted:\n    - called with `(\"good\", \"gooder\")`, ignoring any additional arguments.\n\n  But was actually called:\n    - called with `(\"good\", \"bad\", \"more\", \"args\")`.");
      });
    });
    context('with a named double', function() {
      Given(function() {
        return this.testDouble = td["function"]("#footime");
      });
      When(function() {
        return this.result = shouldThrow((function(_this) {
          return function() {
            return td.verify(_this.testDouble());
          };
        })(this));
      });
      return Then(function() {
        return expect(this.result).to.contain("verification on test double `#footime`.");
      });
    });
    context('with a prototype-modeling double', function() {
      Given(function() {
        return this.SomeType = function Foo() {};
      });
      Given(function() {
        return this.SomeType.prototype.bar = function() {};
      });
      Given(function() {
        return this.SomeType.prototype.baz = function() {};
      });
      Given(function() {
        return this.SomeType.prototype.biz = "not a function!";
      });
      Given(function() {
        return this.testDoubleObj = td.object(this.SomeType);
      });
      When(function() {
        return this.result = shouldThrow((function(_this) {
          return function() {
            return td.verify(_this.testDoubleObj.baz());
          };
        })(this));
      });
      Then(function() {
        return expect(this.result).to.contain("verification on test double `Foo#baz`.");
      });
      return Then(function() {
        return this.testDoubleObj.biz === "not a function!";
      });
    });
    context('with a test double *as an arg* to another', function() {
      Given(function() {
        return this.testDouble = td["function"]();
      });
      When(function() {
        return this.result = shouldThrow((function(_this) {
          return function() {
            return td.verify(_this.testDouble(_this.someTestDoubleArg));
          };
        })(this));
      });
      context('with an unnamed double _as an arg_', function() {
        Given(function() {
          return this.someTestDoubleArg = td["function"]();
        });
        return Then(function() {
          return expect(this.result).to.contain("- called with `([test double (unnamed)])`.");
        });
      });
      return context('with a named double _as an arg_', function() {
        Given(function() {
          return this.someTestDoubleArg = td["function"]("#foo");
        });
        return Then(function() {
          return expect(this.result).to.contain("- called with `([test double for \"#foo\"])`.");
        });
      });
    });
    context('a double-free verification error', function() {
      return Then(function() {
        return shouldThrow(((function(_this) {
          return function() {
            return td.verify();
          };
        })(this)), "Error: testdouble.js - td.verify - No test double invocation detected for `verify()`.\n\n  Usage:\n    verify(myTestDouble('foo'))");
      });
    });
    context('using matchers', function() {
      When(function() {
        return this.testDouble(55);
      });
      context('satisfied', function() {
        return Then(function() {
          return shouldNotThrow((function(_this) {
            return function() {
              return td.verify(_this.testDouble(td.matchers.isA(Number)));
            };
          })(this));
        });
      });
      return context('unsatisfied', function() {
        return Then(function() {
          return shouldThrow(((function(_this) {
            return function() {
              return td.verify(_this.testDouble(td.matchers.isA(String)));
            };
          })(this)), "Unsatisfied verification on test double.\n\n  Wanted:\n    - called with `(isA(String))`.\n\n  But was actually called:\n    - called with `(55)`.");
        });
      });
    });
    describe('configuration', function() {
      describe('ignoring extra arguments (more thoroughly tested via when())', function() {
        When(function() {
          return this.testDouble('matters', 'not');
        });
        return Then(function() {
          return shouldNotThrow((function(_this) {
            return function() {
              return td.verify(_this.testDouble('matters'), {
                ignoreExtraArgs: true
              });
            };
          })(this));
        });
      });
      return describe('number of times an invocation is satisfied', function() {
        context('0 times, satisfied', function() {
          return Then(function() {
            return shouldNotThrow((function(_this) {
              return function() {
                return td.verify(_this.testDouble(), {
                  times: 0
                });
              };
            })(this));
          });
        });
        context('0 times, unsatisfied', function() {
          When(function() {
            return this.testDouble();
          });
          return Then(function() {
            return shouldThrow(((function(_this) {
              return function() {
                return td.verify(_this.testDouble(), {
                  times: 0
                });
              };
            })(this)), "Unsatisfied verification on test double.\n\n  Wanted:\n    - called with `()` 0 times.\n\n  But was actually called:\n    - called with `()`.");
          });
        });
        context('1 time, satisfied', function() {
          When(function() {
            return this.testDouble();
          });
          return Then(function() {
            return shouldNotThrow((function(_this) {
              return function() {
                return td.verify(_this.testDouble(), {
                  times: 1
                });
              };
            })(this));
          });
        });
        context('1 time, unsatisfied (with 2)', function() {
          When(function() {
            return this.testDouble();
          });
          And(function() {
            return this.testDouble();
          });
          return Then(function() {
            return shouldThrow(((function(_this) {
              return function() {
                return td.verify(_this.testDouble(), {
                  times: 1
                });
              };
            })(this)), "Unsatisfied verification on test double.\n\n  Wanted:\n    - called with `()` 1 time.\n\n  But was actually called:\n    - called with `()`.\n    - called with `()`.");
          });
        });
        context('4 times, satisfied', function() {
          When(function() {
            return this.testDouble();
          });
          And(function() {
            return this.testDouble();
          });
          And(function() {
            return this.testDouble();
          });
          And(function() {
            return this.testDouble();
          });
          return Then(function() {
            return shouldNotThrow((function(_this) {
              return function() {
                return td.verify(_this.testDouble(), {
                  times: 4
                });
              };
            })(this));
          });
        });
        return context('4 times, unsatisfied (with 3)', function() {
          When(function() {
            return this.testDouble();
          });
          And(function() {
            return this.testDouble();
          });
          And(function() {
            return this.testDouble();
          });
          return Then(function() {
            return shouldThrow(((function(_this) {
              return function() {
                return td.verify(_this.testDouble(), {
                  times: 4
                });
              };
            })(this)), "Unsatisfied verification on test double.\n\n  Wanted:\n    - called with `()` 4 times.\n\n  But was actually called:\n    - called with `()`.\n    - called with `()`.\n    - called with `()`.");
          });
        });
      });
    });
    return describe('warning when verifying a stubbed invocation', function() {
      var afterEach;
      Given(function() {
        return this.ogWarn = console.warn;
      });
      Given(function() {
        return this.warnings = [];
      });
      Given(function() {
        return console.warn = (function(_this) {
          return function(msg) {
            return _this.warnings.push(msg);
          };
        })(this);
      });
      afterEach = console.warn = this.ogWarn;
      Given(function() {
        return this.td = td["function"]('.foo');
      });
      context('an exact match in calls', function() {
        Given(function() {
          return td.when(this.td(1)).thenReturn(5);
        });
        Given(function() {
          return this.td(1);
        });
        When(function() {
          return td.verify(this.td(1));
        });
        return Then(function() {
          return this.warnings[0] === "Warning: testdouble.js - td.verify - test double `.foo` was both stubbed and verified with arguments (1), which is redundant and probably unnecessary. (see: https://github.com/testdouble/testdouble.js/blob/master/docs/B-frequently-asked-questions.md#why-shouldnt-i-call-both-tdwhen-and-tdverify-for-a-single-interaction-with-a-test-double )";
        });
      });
      return context('matchers are used', function() {
        Given(function() {
          return td.when(this.td(td.matchers.isA(Number))).thenReturn(5);
        });
        Given(function() {
          return this.td(1);
        });
        When(function() {
          return td.verify(this.td(1));
        });
        return Then(function() {
          return this.warnings.length === 0;
        });
      });
    });
  });

}).call(this);
