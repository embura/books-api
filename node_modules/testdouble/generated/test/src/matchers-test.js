// Generated by CoffeeScript 1.11.1
(function() {
  var matches;

  matches = function(expected, actual) {
    if (NODE_JS) {
      return requireSource('args-match')([expected], [actual], {});
    } else {
      return expected.__matches(actual);
    }
  };

  describe('.matchers', function() {
    Given(function() {
      return this.matches = matches;
    });
    describe('.create', function() {
      Given(function() {
        return this.matcher = td.matchers.create({
          name: 'isSame',
          matches: function(matcherArgs, actual) {
            return matcherArgs[0] === actual;
          },
          onCreate: function(matcherInstance, matcherArgs) {
            return matcherInstance.__args = matcherArgs;
          }
        });
      });
      When(function() {
        return this.matcherInstance = this.matcher('foo');
      });
      Then(function() {
        return this.matcherInstance.__name === 'isSame("foo")';
      });
      And(function() {
        return this.matcherInstance.__matches('foo') === true;
      });
      And(function() {
        return this.matcherInstance.__matches('bar') === false;
      });
      And(function() {
        return expect(this.matcherInstance.__args).to.deep.eq(['foo']);
      });
      context('name is a function', function() {
        Given(function() {
          return this.matcher = td.matchers.create({
            name: function(matcherArgs) {
              return "isThing(" + matcherArgs[0].name + ")";
            },
            matches: function() {
              return true;
            }
          });
        });
        When(function() {
          return this.matcherInstance = this.matcher(String);
        });
        return Then(function() {
          return this.matcherInstance.__name === 'isThing(String)';
        });
      });
      return context('no name or onCreate given', function() {
        Given(function() {
          return this.matcher = td.matchers.create({
            matches: function() {
              return true;
            }
          });
        });
        When(function() {
          return this.matcherInstance = this.matcher('bar');
        });
        return Then(function() {
          return this.matcherInstance.__name === '[Matcher for ("bar")]';
        });
      });
    });
    describe('.isA', function() {
      context('numbers', function() {
        Given(function() {
          return this.matcher = td.matchers.isA(Number);
        });
        Then(function() {
          return this.matches(this.matcher, 5) === true;
        });
        Then(function() {
          return this.matches(this.matcher, new Number(5)) === true;
        });
        Then(function() {
          return this.matches(this.matcher, Number(5)) === true;
        });
        Then(function() {
          return this.matches(this.matcher, Number("foo")) === true;
        });
        return Then(function() {
          return this.matches(this.matcher, "foo") === false;
        });
      });
      context('strings', function() {
        Given(function() {
          return this.matcher = td.matchers.isA(String);
        });
        Then(function() {
          return this.matches(this.matcher, 5) === false;
        });
        Then(function() {
          return this.matches(this.matcher, "plop") === true;
        });
        Then(function() {
          return this.matches(this.matcher, String("plop")) === true;
        });
        return Then(function() {
          return this.matches(this.matcher, new String("plop")) === true;
        });
      });
      context('booleans', function() {
        Given(function() {
          return this.matcher = td.matchers.isA(Boolean);
        });
        Then(function() {
          return this.matches(this.matcher, false) === true;
        });
        Then(function() {
          return this.matches(this.matcher, true) === true;
        });
        Then(function() {
          return this.matches(this.matcher, Boolean(false)) === true;
        });
        Then(function() {
          return this.matches(this.matcher, new Boolean(false)) === true;
        });
        Then(function() {
          return this.matches(this.matcher, "false") === false;
        });
        return Then(function() {
          return this.matches(this.matcher, void 0) === false;
        });
      });
      context('other junk', function() {
        Then(function() {
          return this.matches(td.matchers.isA(Array), []) === true;
        });
        Then(function() {
          return this.matches(td.matchers.isA(Object), []) === true;
        });
        Then(function() {
          return this.matches(td.matchers.isA(Date), new Date()) === true;
        });
        return Then(function() {
          return this.matches(td.matchers.isA(Date), new Object()) === false;
        });
      });
      return context('names', function() {
        Then(function() {
          return td.matchers.isA({
            name: 'Poo'
          }).__name === 'isA(Poo)';
        });
        return Then(function() {
          return td.matchers.isA({
            nope: 'foo'
          }).__name === 'isA({nope: "foo"})';
        });
      });
    });
    describe('.anything', function() {
      Then(function() {
        return this.matches(td.matchers.anything(), null) === true;
      });
      Then(function() {
        return this.matches(td.matchers.anything(), void 0) === true;
      });
      Then(function() {
        return this.matches(td.matchers.anything(), new Date()) === true;
      });
      return Then(function() {
        return this.matches(td.matchers.anything(), {
          a: 'foo',
          b: 'bar'
        }) === true;
      });
    });
    describe('.contains', function() {
      context('strings', function() {
        Then(function() {
          return this.matches(td.matchers.contains('bar'), 'foobarbaz') === true;
        });
        return Then(function() {
          return this.matches(td.matchers.contains('biz'), 'foobarbaz') === false;
        });
      });
      context('arrays', function() {
        Then(function() {
          return this.matches(td.matchers.contains('a'), ['a', 'b', 'c']) === true;
        });
        Then(function() {
          return this.matches(td.matchers.contains('a', 'c'), ['a', 'b', 'c']) === true;
        });
        Then(function() {
          return this.matches(td.matchers.contains(['a', 'c']), ['a', 'b', 'c']) === false;
        });
        Then(function() {
          return this.matches(td.matchers.contains(['a', 'c']), [1, ['a', 'c'], 4]) === true;
        });
        Then(function() {
          return this.matches(td.matchers.contains(['a', 'c']), ['a', 'b', 'z']) === false;
        });
        Then(function() {
          return this.matches(td.matchers.contains(true, 5, null, void 0), [true, 5, void 0, null]) === true;
        });
        return Then(function() {
          return this.matches(td.matchers.contains(true, 5, null, void 0), [true, 5, null]) === false;
        });
      });
      context('objects', function() {
        Then(function() {
          return this.matches(td.matchers.contains({
            foo: 'bar',
            baz: 42
          }), {
            foo: 'bar',
            baz: 42,
            stuff: this
          }) === true;
        });
        Then(function() {
          return this.matches(td.matchers.contains({
            foo: 'bar',
            lol: 42
          }), {
            foo: 'bar',
            baz: 42
          }) === false;
        });
        Then(function() {
          return this.matches(td.matchers.contains({
            lol: {
              deep: [4, 2]
            }
          }), {
            lol: {
              deep: [4, 2],
              other: "stuff"
            }
          }) === true;
        });
        Then(function() {
          return this.matches(td.matchers.contains({
            deep: {
              thing: 'stuff'
            }
          }), {}) === false;
        });
        Then(function() {
          return this.matches(td.matchers.contains({
            deep: {
              thing: 'stuff'
            }
          }), {
            deep: {
              thing: 'stuff',
              shallow: 5
            }
          }) === true;
        });
        return Then(function() {
          return this.matches(td.matchers.contains({
            container: {
              size: 'S'
            }
          }), {
            ingredient: 'beans',
            container: {
              type: 'cup',
              size: 'S'
            }
          }) === true;
        });
      });
      context('regexp', function() {
        Then(function() {
          return this.matches(td.matchers.contains(/abc/), 'abc') === true;
        });
        Then(function() {
          return this.matches(td.matchers.contains(/abc/), {
            foo: 'bar'
          }) === false;
        });
        return Then(function() {
          return this.matches(td.matchers.contains(/abc/), ['foo', 'bar']) === false;
        });
      });
      return context('nonsense', function() {
        Then(function() {
          return this.matches(td.matchers.contains(42), 42) === false;
        });
        Then(function() {
          return this.matches(td.matchers.contains(null), 'shoo') === false;
        });
        Then(function() {
          return this.matches(td.matchers.contains(), 'shoo') === false;
        });
        return Then(function() {
          return this.matches(td.matchers.contains({}), void 0) === false;
        });
      });
    });
    describe('argThat', function() {
      Then(function() {
        return this.matches(td.matchers.argThat(function(arg) {
          return arg > 5;
        }), 6) === true;
      });
      return Then(function() {
        return this.matches(td.matchers.argThat(function(arg) {
          return arg > 5;
        }), 5) === false;
      });
    });
    return describe('not', function() {
      Then(function() {
        return this.matches(td.matchers.not(5), 6) === true;
      });
      Then(function() {
        return this.matches(td.matchers.not(5), 5) === false;
      });
      return Then(function() {
        return this.matches(td.matchers.not(['hi']), ['hi']) === false;
      });
    });
  });

}).call(this);
