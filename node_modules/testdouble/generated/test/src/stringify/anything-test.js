// Generated by CoffeeScript 1.11.1
(function() {
  if (!NODE_JS) {
    return;
  }

  describe('stringify/anything', function() {
    Given(function() {
      return this.subject = requireSource('stringify/anything');
    });
    Then(function() {
      return this.subject(void 0) === "undefined";
    });
    And(function() {
      return this.subject(null) === "null";
    });
    And(function() {
      return this.subject(0) === "0";
    });
    And(function() {
      return this.subject("foo") === '"foo"';
    });
    And(function() {
      return this.subject(false) === 'false';
    });
    context('short strings of objects should be one-lined', function() {
      return Then(function() {
        return expect(this.subject({
          userId: 42,
          name: 'Jane'
        })).to.eq('{userId: 42, name: "Jane"}');
      });
    });
    context('long strings of objects should be multi-lined', function() {
      Given(function() {
        return this.object = {
          userId: 42,
          name: 'Jane',
          details: {
            kids: ['jack', 'jill']
          }
        };
      });
      Given(function() {
        return this.object.circular = this.object;
      });
      return Then(function() {
        return expect(this.subject(this.object)).to.eq("{\n  userId: 42,\n  name: \"Jane\",\n  details: {kids: [\"jack\", \"jill\"]},\n  circular: \"[Circular]\"\n}");
      });
    });
    context('short strings should have quotes escaped', function() {
      Given(function() {
        return this.shortString = 'hey "justin"!';
      });
      return Then(function() {
        return expect(this.subject(this.shortString)).to.eq('"hey \\\"justin\\\"!"');
      });
    });
    return context('multiline strings should be heredoc-d', function() {
      Given(function() {
        return this.longString = "ojsaodjasiodjsaodijsado asj asodjaosdj asodjsaoidjsa odjasoidjasodjas\nasdojsadojdosajodsajd saoji joasdjoajsd\nasdjoj\n\nasdojasdoajsdoasjdaosjdoasjsaodjoadjoasjdojasdojsaodijsaidojojsoidjasodij\naoso";
      });
      return Then(function() {
        return expect(this.subject(this.longString)).to.eq("\"\"\"\n" + this.longString + "\n\"\"\"");
      });
    });
  });

}).call(this);
