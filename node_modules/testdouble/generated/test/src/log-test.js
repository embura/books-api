// Generated by CoffeeScript 1.11.1
(function() {
  if (!NODE_JS) {
    return;
  }

  describe('log', function() {
    Given(function() {
      return this.subject = requireSource('log');
    });
    describe('.warn', function() {
      Given(function() {
        return this.ogWarn = console.warn;
      });
      afterEach(function() {
        return console.warn = this.ogWarn;
      });
      context('when console.warn is a thing', function() {
        Given(function() {
          return this.warnings = [];
        });
        Given(function() {
          return console.warn = (function(_this) {
            return function(msg) {
              return _this.warnings.push(msg);
            };
          })(this);
        });
        context('no URL', function() {
          When(function() {
            return this.subject.warn('td.someFunc', 'ugh');
          });
          return Then(function() {
            return this.warnings[0] === 'Warning: testdouble.js - td.someFunc - ugh';
          });
        });
        context('with a documentation URL', function() {
          When(function() {
            return this.subject.warn('td.someFunc', 'ugh', 'http?');
          });
          return Then(function() {
            return this.warnings[0] === 'Warning: testdouble.js - td.someFunc - ugh (see: http? )';
          });
        });
        return context('with td.config({ignoreWarnings: true})', function() {
          Given(function() {
            return td.config({
              ignoreWarnings: true
            });
          });
          When(function() {
            return this.subject.warn('waaaarning');
          });
          return Then(function() {
            return this.warnings.length === 0;
          });
        });
      });
      context('when console.warn does not exist', function() {
        Given(function() {
          return console.warn = void 0;
        });
        When(function() {
          return this.subject.warn('lolololol', 'lol');
        });
        return Then(function() {});
      });
      return context('when console does not exist', function() {
        Given(function() {
          return this.ogConsole = console;
        });
        Given(function() {
          return delete global.console;
        });
        When(function() {
          return this.subject.warn('lolololol', 'lol');
        });
        Then(function() {});
        return afterEach(function() {
          return global.console = this.ogConsole;
        });
      });
    });
    describe('.error', function() {
      context('suppressErrors: true', function() {
        Given(function() {
          return td.config({
            suppressErrors: true
          });
        });
        When(function() {
          return this.subject.error('hi', 'hi');
        });
        return Then(function() {});
      });
      context('without url', function() {
        When(function() {
          var e;
          try {
            return this.subject.error('td.lol', 'oops');
          } catch (error) {
            e = error;
            return this.error = e;
          }
        });
        return Then(function() {
          return this.error.message = "Error: testdouble.js - td.lol - oops";
        });
      });
      return context('with url', function() {
        When(function() {
          var e;
          try {
            return this.subject.error('td.lol', 'oops', 'ftp:');
          } catch (error) {
            e = error;
            return this.error = e;
          }
        });
        return Then(function() {
          return this.error.message = "Error: testdouble.js - td.lol - oops (see: ftp:)";
        });
      });
    });
    return describe('.fail', function() {
      When(function() {
        var e;
        try {
          return this.subject.fail('boom. failed.');
        } catch (error) {
          e = error;
          return this.error = e;
        }
      });
      return Then(function() {
        return this.error.message === 'boom. failed.';
      });
    });
  });

}).call(this);
