// Generated by CoffeeScript 1.11.1
(function() {
  describe('.explain', function() {
    Given(function() {
      return this.testDouble = td["function"]();
    });
    When(function() {
      return this.result = td.explain(this.testDouble);
    });
    context('a brand new test double', function() {
      return Then(function() {
        return expect(this.result).to.deep.eq({
          calls: [],
          callCount: 0,
          description: "This test double has 0 stubbings and 0 invocations.",
          isTestDouble: true
        });
      });
    });
    context('a named test double', function() {
      Given(function() {
        return this.testDouble = td["function"]("foobaby");
      });
      return Then(function() {
        return expect(this.result.description).to.deep.eq("This test double `foobaby` has 0 stubbings and 0 invocations.");
      });
    });
    context('a double with some interactions', function() {
      Given(function() {
        return td.when(this.testDouble(88)).thenReturn(5);
      });
      Given(function() {
        return td.when(this.testDouble("two things!")).thenReturn("woah", "such");
      });
      Given(function() {
        return this.testDouble(88);
      });
      Given(function() {
        return this.testDouble("not 88", 44);
      });
      return Then(function() {
        return expect(this.result).to.deep.eq({
          calls: [
            {
              context: this,
              args: [88]
            }, {
              context: this,
              args: ["not 88", 44]
            }
          ],
          callCount: 2,
          description: "This test double has 2 stubbings and 2 invocations.\n\nStubbings:\n  - when called with `(88)`, then return `5`.\n  - when called with `(\"two things!\")`, then return `\"woah\"`, then `\"such\"`.\n\nInvocations:\n  - called with `(88)`.\n  - called with `(\"not 88\", 44)`.",
          isTestDouble: true
        });
      });
    });
    context('a double with callback', function() {
      Given(function() {
        return td.when(this.testDouble(14)).thenCallback(null, 8);
      });
      return Then(function() {
        return expect(this.result).to.deep.eq({
          calls: [],
          callCount: 0,
          description: "This test double has 1 stubbings and 0 invocations.\n\nStubbings:\n  - when called with `(14, callback)`, then callback `(null, 8)`.",
          isTestDouble: true
        });
      });
    });
    context('a double with resolve', function() {
      Given(function() {
        return td.when(this.testDouble(14)).thenResolve(8);
      });
      return Then(function() {
        return expect(this.result).to.deep.eq({
          calls: [],
          callCount: 0,
          description: "This test double has 1 stubbings and 0 invocations.\n\nStubbings:\n  - when called with `(14)`, then resolve `8`.",
          isTestDouble: true
        });
      });
    });
    context('a double with reject', function() {
      Given(function() {
        return td.when(this.testDouble(14)).thenReject(8);
      });
      return Then(function() {
        return expect(this.result).to.deep.eq({
          calls: [],
          callCount: 0,
          description: "This test double has 1 stubbings and 0 invocations.\n\nStubbings:\n  - when called with `(14)`, then reject `8`.",
          isTestDouble: true
        });
      });
    });
    return context('passed a non-test double', function() {
      Given(function() {
        return this.testDouble = 42;
      });
      return Then(function() {
        return expect(this.result).to.deep.eq({
          calls: [],
          callCount: 0,
          description: "This is not a test double.",
          isTestDouble: false
        });
      });
    });
  });

}).call(this);
